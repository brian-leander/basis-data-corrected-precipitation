package dk.dmi.lib.db;import java.sql.*;public class Database {    private Statement stmt = null;    private ResultSet rs = null;    private Connection conn = null;    private String connectionString = "";    private String driver = "";    protected String catalog = "";    public static final int MYSQL = 1;    public static final int POSTGRES = 3;    public Database(String url, String user, String password, int databaseType) {        if (databaseType == MYSQL) {            connectionString = "jdbc:mysql://" + url + "?" + "user=" + user + "&password=" + password;            driver = "com.mysql.jdbc.Driver";        } else if (databaseType == POSTGRES) {            connectionString = "jdbc:postgresql://" + url + "?" + "user=" + user + "&password=" + password;            driver = "org.postgresql.Driver";        }        System.out.println(connectionString);        try {            Class.forName(driver);        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }    public int getHighestId(String fieldName, String tableName) {        String sql = "SELECT max( " + fieldName + ") FROM " + tableName;        int id = getInt(sql);        return id;    }    public int getInt(String sql) {        int id = 0;        try {            ResultSet rs = stmt.executeQuery(sql);            rs.next();            id = rs.getInt(1);        } catch (SQLException e) {            e.printStackTrace();        }        return id;    }    public double getDouble(String sql) {        double id = 0;        try {            ResultSet rs = stmt.executeQuery(sql);            rs.next();            id = rs.getDouble(1);        } catch (SQLException e) {            e.printStackTrace();        }        return id;    }    public void execute(String sql) {        //System.out.println(sql);        try {            stmt.execute(sql);        } catch (SQLException e) {            e.printStackTrace();        }        //System.out.println("--------");    }    public ResultSet executeQuery(String sql) {        ResultSet rs = null;        try {            rs = stmt.executeQuery(sql);        } catch (SQLException e) {            System.out.println("Exception thrown from Database.executeQuery");            e.printStackTrace();            close();        }        return rs;    }    public ResultSet executeQueryIngres(String sql) {        //System.out.println(sql);        ResultSet rs = null;        try {            rs = stmt.executeQuery(sql);        } catch (SQLException e) {            System.out.println("Exception thrown from Database.executeQuery");            e.printStackTrace();            close();        }        //System.out.println("--------");        return rs;    }    public void open() {        if (conn == null) {            try {                //DriverManager.getDriver();                conn = DriverManager.getConnection(connectionString);                conn.setCatalog(catalog);                stmt = conn.createStatement();            } catch (SQLException ex) {                System.out.println("SQLException: " + ex.getMessage());                System.out.println("SQLState: " + ex.getSQLState());                System.out.println("VendorError: " + ex.getErrorCode());            }        }    }    public void close() {        if (rs != null) {            try {                rs.close();                conn = null;            } catch (SQLException sqlEx) { // ignore }                rs = null;                System.out.println(sqlEx.toString());            }            if (stmt != null) {                try {                    stmt.close();                } catch (SQLException sqlEx) { // ignore }                    stmt = null;                    System.out.println(sqlEx.toString());                }            }        }        if (conn != null) {            try {                System.out.println("Closed connection");                conn.close();                conn = null;            } catch (SQLException e) {                e.printStackTrace();            }        }    }    public Connection getConnection() {        return conn;    }    public Statement getStatement() {        return stmt;    }}